//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace WebServiceProxyClient.mtsWebServiceAB {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServicePeakSoap", Namespace="http://com.itraycer.mts/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoreInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class ServicePeak : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HasLoggedInOrOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocPrefsFromDumpOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateScheduleRevenueOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRecallsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRecallAlertDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateRecallStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertChatMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCoIDandRepIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocationsByCompanyOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessBarCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurgeInSurgeryOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveSurgeryScheduleOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSurgeryScheduleOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSurgeryScheduleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSurgeryScheduleOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveRandomTraysOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllTrayTypesByCompanyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveRandomDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveRandomBiologicOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertTrayNotesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveRandomInventoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNewsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAlertValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRevenueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAddressByCoordinatesForPhoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChatMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReturnChatRepsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddInventoryByTrayLotPartOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurgeInventoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurgeInventoryEncryptOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertLoanerShipInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AllManufacturesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetZonesByRepIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidatePasscodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPartNumbersByRepIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTraysByLotOrPartNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTraysByLotOrPartNumberEncryptOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertInstrumentUsageCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPurgedPartNumbersByRepIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback MakeRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReturnRepNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInventoryByRadiusAndParamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReceiverManagerGetScannedTraysOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTrayderRequestsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TrayderAgreeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTrayDataByRepIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback TESTOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveLoanerTrayListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDoctorsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetShippingAddressByRepAndCoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSurgeryTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTrayByEntityOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ServicePeak() {
            this.Url = global::WebServiceProxyClient.Properties.Settings.Default.WebServiceProxyClient_mtsWebServiceAB_ServicePeak;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HasLoggedInOrOutCompletedEventHandler HasLoggedInOrOutCompleted;
        
        /// <remarks/>
        public event GetDocPrefsFromDumpCompletedEventHandler GetDocPrefsFromDumpCompleted;
        
        /// <remarks/>
        public event CalculateScheduleRevenueCompletedEventHandler CalculateScheduleRevenueCompleted;
        
        /// <remarks/>
        public event CheckRecallsCompletedEventHandler CheckRecallsCompleted;
        
        /// <remarks/>
        public event GetRecallAlertDataCompletedEventHandler GetRecallAlertDataCompleted;
        
        /// <remarks/>
        public event UpdateRecallStatusCompletedEventHandler UpdateRecallStatusCompleted;
        
        /// <remarks/>
        public event InsertChatMessageCompletedEventHandler InsertChatMessageCompleted;
        
        /// <remarks/>
        public event GetCoIDandRepIDCompletedEventHandler GetCoIDandRepIDCompleted;
        
        /// <remarks/>
        public event GetLocationsByCompanyCompletedEventHandler GetLocationsByCompanyCompleted;
        
        /// <remarks/>
        public event ProcessBarCodeCompletedEventHandler ProcessBarCodeCompleted;
        
        /// <remarks/>
        public event PurgeInSurgeryCompletedEventHandler PurgeInSurgeryCompleted;
        
        /// <remarks/>
        public event SaveSurgeryScheduleCompletedEventHandler SaveSurgeryScheduleCompleted;
        
        /// <remarks/>
        public event UpdateSurgeryScheduleCompletedEventHandler UpdateSurgeryScheduleCompleted;
        
        /// <remarks/>
        public event DeleteSurgeryScheduleCompletedEventHandler DeleteSurgeryScheduleCompleted;
        
        /// <remarks/>
        public event GetSurgeryScheduleCompletedEventHandler GetSurgeryScheduleCompleted;
        
        /// <remarks/>
        public event SaveRandomTraysCompletedEventHandler SaveRandomTraysCompleted;
        
        /// <remarks/>
        public event GetAllTrayTypesByCompanyCompletedEventHandler GetAllTrayTypesByCompanyCompleted;
        
        /// <remarks/>
        public event SaveRandomDeviceCompletedEventHandler SaveRandomDeviceCompleted;
        
        /// <remarks/>
        public event SaveRandomBiologicCompletedEventHandler SaveRandomBiologicCompleted;
        
        /// <remarks/>
        public event InsertTrayNotesCompletedEventHandler InsertTrayNotesCompleted;
        
        /// <remarks/>
        public event SaveRandomInventoryCompletedEventHandler SaveRandomInventoryCompleted;
        
        /// <remarks/>
        public event GetNewsCompletedEventHandler GetNewsCompleted;
        
        /// <remarks/>
        public event GetAlertValuesCompletedEventHandler GetAlertValuesCompleted;
        
        /// <remarks/>
        public event GetRevenueCompletedEventHandler GetRevenueCompleted;
        
        /// <remarks/>
        public event GetAddressByCoordinatesForPhoneCompletedEventHandler GetAddressByCoordinatesForPhoneCompleted;
        
        /// <remarks/>
        public event GetChatMessagesCompletedEventHandler GetChatMessagesCompleted;
        
        /// <remarks/>
        public event ReturnChatRepsCompletedEventHandler ReturnChatRepsCompleted;
        
        /// <remarks/>
        public event AddInventoryByTrayLotPartCompletedEventHandler AddInventoryByTrayLotPartCompleted;
        
        /// <remarks/>
        public event PurgeInventoryCompletedEventHandler PurgeInventoryCompleted;
        
        /// <remarks/>
        public event PurgeInventoryEncryptCompletedEventHandler PurgeInventoryEncryptCompleted;
        
        /// <remarks/>
        public event InsertLoanerShipInfoCompletedEventHandler InsertLoanerShipInfoCompleted;
        
        /// <remarks/>
        public event AllManufacturesCompletedEventHandler AllManufacturesCompleted;
        
        /// <remarks/>
        public event GetZonesByRepIDCompletedEventHandler GetZonesByRepIDCompleted;
        
        /// <remarks/>
        public event ValidatePasscodeCompletedEventHandler ValidatePasscodeCompleted;
        
        /// <remarks/>
        public event GetPartNumbersByRepIDCompletedEventHandler GetPartNumbersByRepIDCompleted;
        
        /// <remarks/>
        public event GetTraysByLotOrPartNumberCompletedEventHandler GetTraysByLotOrPartNumberCompleted;
        
        /// <remarks/>
        public event GetTraysByLotOrPartNumberEncryptCompletedEventHandler GetTraysByLotOrPartNumberEncryptCompleted;
        
        /// <remarks/>
        public event InsertInstrumentUsageCountCompletedEventHandler InsertInstrumentUsageCountCompleted;
        
        /// <remarks/>
        public event GetPurgedPartNumbersByRepIDCompletedEventHandler GetPurgedPartNumbersByRepIDCompleted;
        
        /// <remarks/>
        public event HasRequestCompletedEventHandler HasRequestCompleted;
        
        /// <remarks/>
        public event MakeRequestCompletedEventHandler MakeRequestCompleted;
        
        /// <remarks/>
        public event ReturnRepNameCompletedEventHandler ReturnRepNameCompleted;
        
        /// <remarks/>
        public event GetInventoryByRadiusAndParamsCompletedEventHandler GetInventoryByRadiusAndParamsCompleted;
        
        /// <remarks/>
        public event ReceiverManagerGetScannedTraysCompletedEventHandler ReceiverManagerGetScannedTraysCompleted;
        
        /// <remarks/>
        public event GetTrayderRequestsCompletedEventHandler GetTrayderRequestsCompleted;
        
        /// <remarks/>
        public event TrayderAgreeCompletedEventHandler TrayderAgreeCompleted;
        
        /// <remarks/>
        public event GetTrayDataByRepIDCompletedEventHandler GetTrayDataByRepIDCompleted;
        
        /// <remarks/>
        public event TESTCompletedEventHandler TESTCompleted;
        
        /// <remarks/>
        public event RetrieveLoanerTrayListCompletedEventHandler RetrieveLoanerTrayListCompleted;
        
        /// <remarks/>
        public event GetDoctorsCompletedEventHandler GetDoctorsCompleted;
        
        /// <remarks/>
        public event GetShippingAddressByRepAndCoCompletedEventHandler GetShippingAddressByRepAndCoCompleted;
        
        /// <remarks/>
        public event GetSurgeryTypesCompletedEventHandler GetSurgeryTypesCompleted;
        
        /// <remarks/>
        public event UpdateTrayByEntityCompletedEventHandler UpdateTrayByEntityCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/HasLoggedInOrOut", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void HasLoggedInOrOut(string RepID, bool LoggedIn, bool LoggedOut) {
            this.Invoke("HasLoggedInOrOut", new object[] {
                        RepID,
                        LoggedIn,
                        LoggedOut});
        }
        
        /// <remarks/>
        public void HasLoggedInOrOutAsync(string RepID, bool LoggedIn, bool LoggedOut) {
            this.HasLoggedInOrOutAsync(RepID, LoggedIn, LoggedOut, null);
        }
        
        /// <remarks/>
        public void HasLoggedInOrOutAsync(string RepID, bool LoggedIn, bool LoggedOut, object userState) {
            if ((this.HasLoggedInOrOutOperationCompleted == null)) {
                this.HasLoggedInOrOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasLoggedInOrOutOperationCompleted);
            }
            this.InvokeAsync("HasLoggedInOrOut", new object[] {
                        RepID,
                        LoggedIn,
                        LoggedOut}, this.HasLoggedInOrOutOperationCompleted, userState);
        }
        
        private void OnHasLoggedInOrOutOperationCompleted(object arg) {
            if ((this.HasLoggedInOrOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasLoggedInOrOutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetDocPrefsFromDump", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDocPrefsFromDump(string DocName, string DocAddress, string DocSpecialty, string DocHospital) {
            object[] results = this.Invoke("GetDocPrefsFromDump", new object[] {
                        DocName,
                        DocAddress,
                        DocSpecialty,
                        DocHospital});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocPrefsFromDumpAsync(string DocName, string DocAddress, string DocSpecialty, string DocHospital) {
            this.GetDocPrefsFromDumpAsync(DocName, DocAddress, DocSpecialty, DocHospital, null);
        }
        
        /// <remarks/>
        public void GetDocPrefsFromDumpAsync(string DocName, string DocAddress, string DocSpecialty, string DocHospital, object userState) {
            if ((this.GetDocPrefsFromDumpOperationCompleted == null)) {
                this.GetDocPrefsFromDumpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocPrefsFromDumpOperationCompleted);
            }
            this.InvokeAsync("GetDocPrefsFromDump", new object[] {
                        DocName,
                        DocAddress,
                        DocSpecialty,
                        DocHospital}, this.GetDocPrefsFromDumpOperationCompleted, userState);
        }
        
        private void OnGetDocPrefsFromDumpOperationCompleted(object arg) {
            if ((this.GetDocPrefsFromDumpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocPrefsFromDumpCompleted(this, new GetDocPrefsFromDumpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/CalculateScheduleRevenue", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CalculateScheduleRevenue(string pBeginDate, string pEndDate, string pCaseType) {
            object[] results = this.Invoke("CalculateScheduleRevenue", new object[] {
                        pBeginDate,
                        pEndDate,
                        pCaseType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CalculateScheduleRevenueAsync(string pBeginDate, string pEndDate, string pCaseType) {
            this.CalculateScheduleRevenueAsync(pBeginDate, pEndDate, pCaseType, null);
        }
        
        /// <remarks/>
        public void CalculateScheduleRevenueAsync(string pBeginDate, string pEndDate, string pCaseType, object userState) {
            if ((this.CalculateScheduleRevenueOperationCompleted == null)) {
                this.CalculateScheduleRevenueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateScheduleRevenueOperationCompleted);
            }
            this.InvokeAsync("CalculateScheduleRevenue", new object[] {
                        pBeginDate,
                        pEndDate,
                        pCaseType}, this.CalculateScheduleRevenueOperationCompleted, userState);
        }
        
        private void OnCalculateScheduleRevenueOperationCompleted(object arg) {
            if ((this.CalculateScheduleRevenueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateScheduleRevenueCompleted(this, new CalculateScheduleRevenueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/CheckRecalls", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckRecalls(string pRepID, string pCoID) {
            object[] results = this.Invoke("CheckRecalls", new object[] {
                        pRepID,
                        pCoID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRecallsAsync(string pRepID, string pCoID) {
            this.CheckRecallsAsync(pRepID, pCoID, null);
        }
        
        /// <remarks/>
        public void CheckRecallsAsync(string pRepID, string pCoID, object userState) {
            if ((this.CheckRecallsOperationCompleted == null)) {
                this.CheckRecallsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRecallsOperationCompleted);
            }
            this.InvokeAsync("CheckRecalls", new object[] {
                        pRepID,
                        pCoID}, this.CheckRecallsOperationCompleted, userState);
        }
        
        private void OnCheckRecallsOperationCompleted(object arg) {
            if ((this.CheckRecallsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRecallsCompleted(this, new CheckRecallsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetRecallAlertData", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRecallAlertData(string pRepID, string pCoID) {
            object[] results = this.Invoke("GetRecallAlertData", new object[] {
                        pRepID,
                        pCoID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRecallAlertDataAsync(string pRepID, string pCoID) {
            this.GetRecallAlertDataAsync(pRepID, pCoID, null);
        }
        
        /// <remarks/>
        public void GetRecallAlertDataAsync(string pRepID, string pCoID, object userState) {
            if ((this.GetRecallAlertDataOperationCompleted == null)) {
                this.GetRecallAlertDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRecallAlertDataOperationCompleted);
            }
            this.InvokeAsync("GetRecallAlertData", new object[] {
                        pRepID,
                        pCoID}, this.GetRecallAlertDataOperationCompleted, userState);
        }
        
        private void OnGetRecallAlertDataOperationCompleted(object arg) {
            if ((this.GetRecallAlertDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRecallAlertDataCompleted(this, new GetRecallAlertDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/UpdateRecallStatus", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateRecallStatus(string ID, string pTracking) {
            object[] results = this.Invoke("UpdateRecallStatus", new object[] {
                        ID,
                        pTracking});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateRecallStatusAsync(string ID, string pTracking) {
            this.UpdateRecallStatusAsync(ID, pTracking, null);
        }
        
        /// <remarks/>
        public void UpdateRecallStatusAsync(string ID, string pTracking, object userState) {
            if ((this.UpdateRecallStatusOperationCompleted == null)) {
                this.UpdateRecallStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateRecallStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateRecallStatus", new object[] {
                        ID,
                        pTracking}, this.UpdateRecallStatusOperationCompleted, userState);
        }
        
        private void OnUpdateRecallStatusOperationCompleted(object arg) {
            if ((this.UpdateRecallStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateRecallStatusCompleted(this, new UpdateRecallStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/InsertChatMessage", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertChatMessage(string pMessage, string pRepIDFrom, string pRepIDTo, string pCoID) {
            object[] results = this.Invoke("InsertChatMessage", new object[] {
                        pMessage,
                        pRepIDFrom,
                        pRepIDTo,
                        pCoID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertChatMessageAsync(string pMessage, string pRepIDFrom, string pRepIDTo, string pCoID) {
            this.InsertChatMessageAsync(pMessage, pRepIDFrom, pRepIDTo, pCoID, null);
        }
        
        /// <remarks/>
        public void InsertChatMessageAsync(string pMessage, string pRepIDFrom, string pRepIDTo, string pCoID, object userState) {
            if ((this.InsertChatMessageOperationCompleted == null)) {
                this.InsertChatMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertChatMessageOperationCompleted);
            }
            this.InvokeAsync("InsertChatMessage", new object[] {
                        pMessage,
                        pRepIDFrom,
                        pRepIDTo,
                        pCoID}, this.InsertChatMessageOperationCompleted, userState);
        }
        
        private void OnInsertChatMessageOperationCompleted(object arg) {
            if ((this.InsertChatMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertChatMessageCompleted(this, new InsertChatMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetCoIDandRepID", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCoIDandRepID(string pPasscode, string pEmail) {
            object[] results = this.Invoke("GetCoIDandRepID", new object[] {
                        pPasscode,
                        pEmail});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCoIDandRepIDAsync(string pPasscode, string pEmail) {
            this.GetCoIDandRepIDAsync(pPasscode, pEmail, null);
        }
        
        /// <remarks/>
        public void GetCoIDandRepIDAsync(string pPasscode, string pEmail, object userState) {
            if ((this.GetCoIDandRepIDOperationCompleted == null)) {
                this.GetCoIDandRepIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCoIDandRepIDOperationCompleted);
            }
            this.InvokeAsync("GetCoIDandRepID", new object[] {
                        pPasscode,
                        pEmail}, this.GetCoIDandRepIDOperationCompleted, userState);
        }
        
        private void OnGetCoIDandRepIDOperationCompleted(object arg) {
            if ((this.GetCoIDandRepIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCoIDandRepIDCompleted(this, new GetCoIDandRepIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetLocationsByCompany", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLocationsByCompany(string pRepID, string pCoID) {
            object[] results = this.Invoke("GetLocationsByCompany", new object[] {
                        pRepID,
                        pCoID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLocationsByCompanyAsync(string pRepID, string pCoID) {
            this.GetLocationsByCompanyAsync(pRepID, pCoID, null);
        }
        
        /// <remarks/>
        public void GetLocationsByCompanyAsync(string pRepID, string pCoID, object userState) {
            if ((this.GetLocationsByCompanyOperationCompleted == null)) {
                this.GetLocationsByCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationsByCompanyOperationCompleted);
            }
            this.InvokeAsync("GetLocationsByCompany", new object[] {
                        pRepID,
                        pCoID}, this.GetLocationsByCompanyOperationCompleted, userState);
        }
        
        private void OnGetLocationsByCompanyOperationCompleted(object arg) {
            if ((this.GetLocationsByCompanyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationsByCompanyCompleted(this, new GetLocationsByCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/ProcessBarCode", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] ProcessBarCode([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] pImageFromDeviceArray) {
            object[] results = this.Invoke("ProcessBarCode", new object[] {
                        pImageFromDeviceArray});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void ProcessBarCodeAsync(byte[] pImageFromDeviceArray) {
            this.ProcessBarCodeAsync(pImageFromDeviceArray, null);
        }
        
        /// <remarks/>
        public void ProcessBarCodeAsync(byte[] pImageFromDeviceArray, object userState) {
            if ((this.ProcessBarCodeOperationCompleted == null)) {
                this.ProcessBarCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessBarCodeOperationCompleted);
            }
            this.InvokeAsync("ProcessBarCode", new object[] {
                        pImageFromDeviceArray}, this.ProcessBarCodeOperationCompleted, userState);
        }
        
        private void OnProcessBarCodeOperationCompleted(object arg) {
            if ((this.ProcessBarCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessBarCodeCompleted(this, new ProcessBarCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/PurgeInSurgery", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PurgeInSurgery() {
            object[] results = this.Invoke("PurgeInSurgery", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PurgeInSurgeryAsync() {
            this.PurgeInSurgeryAsync(null);
        }
        
        /// <remarks/>
        public void PurgeInSurgeryAsync(object userState) {
            if ((this.PurgeInSurgeryOperationCompleted == null)) {
                this.PurgeInSurgeryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurgeInSurgeryOperationCompleted);
            }
            this.InvokeAsync("PurgeInSurgery", new object[0], this.PurgeInSurgeryOperationCompleted, userState);
        }
        
        private void OnPurgeInSurgeryOperationCompleted(object arg) {
            if ((this.PurgeInSurgeryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurgeInSurgeryCompleted(this, new PurgeInSurgeryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/SaveSurgerySchedule", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveSurgerySchedule(string pTray, string pSurgeon, string pHospital, string pPatientID, string pDate, string pRepID, string pCoID, string pSurgeryType, string pNotes) {
            object[] results = this.Invoke("SaveSurgerySchedule", new object[] {
                        pTray,
                        pSurgeon,
                        pHospital,
                        pPatientID,
                        pDate,
                        pRepID,
                        pCoID,
                        pSurgeryType,
                        pNotes});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveSurgeryScheduleAsync(string pTray, string pSurgeon, string pHospital, string pPatientID, string pDate, string pRepID, string pCoID, string pSurgeryType, string pNotes) {
            this.SaveSurgeryScheduleAsync(pTray, pSurgeon, pHospital, pPatientID, pDate, pRepID, pCoID, pSurgeryType, pNotes, null);
        }
        
        /// <remarks/>
        public void SaveSurgeryScheduleAsync(string pTray, string pSurgeon, string pHospital, string pPatientID, string pDate, string pRepID, string pCoID, string pSurgeryType, string pNotes, object userState) {
            if ((this.SaveSurgeryScheduleOperationCompleted == null)) {
                this.SaveSurgeryScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveSurgeryScheduleOperationCompleted);
            }
            this.InvokeAsync("SaveSurgerySchedule", new object[] {
                        pTray,
                        pSurgeon,
                        pHospital,
                        pPatientID,
                        pDate,
                        pRepID,
                        pCoID,
                        pSurgeryType,
                        pNotes}, this.SaveSurgeryScheduleOperationCompleted, userState);
        }
        
        private void OnSaveSurgeryScheduleOperationCompleted(object arg) {
            if ((this.SaveSurgeryScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveSurgeryScheduleCompleted(this, new SaveSurgeryScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/UpdateSurgerySchedule", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateSurgerySchedule(string pScheduleID, string pTray, string pSurgeon, string pHospital, string pPatientID, string pDate, string pRepID, string pCoID, string pSurgeryType, string pNotes) {
            object[] results = this.Invoke("UpdateSurgerySchedule", new object[] {
                        pScheduleID,
                        pTray,
                        pSurgeon,
                        pHospital,
                        pPatientID,
                        pDate,
                        pRepID,
                        pCoID,
                        pSurgeryType,
                        pNotes});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSurgeryScheduleAsync(string pScheduleID, string pTray, string pSurgeon, string pHospital, string pPatientID, string pDate, string pRepID, string pCoID, string pSurgeryType, string pNotes) {
            this.UpdateSurgeryScheduleAsync(pScheduleID, pTray, pSurgeon, pHospital, pPatientID, pDate, pRepID, pCoID, pSurgeryType, pNotes, null);
        }
        
        /// <remarks/>
        public void UpdateSurgeryScheduleAsync(string pScheduleID, string pTray, string pSurgeon, string pHospital, string pPatientID, string pDate, string pRepID, string pCoID, string pSurgeryType, string pNotes, object userState) {
            if ((this.UpdateSurgeryScheduleOperationCompleted == null)) {
                this.UpdateSurgeryScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSurgeryScheduleOperationCompleted);
            }
            this.InvokeAsync("UpdateSurgerySchedule", new object[] {
                        pScheduleID,
                        pTray,
                        pSurgeon,
                        pHospital,
                        pPatientID,
                        pDate,
                        pRepID,
                        pCoID,
                        pSurgeryType,
                        pNotes}, this.UpdateSurgeryScheduleOperationCompleted, userState);
        }
        
        private void OnUpdateSurgeryScheduleOperationCompleted(object arg) {
            if ((this.UpdateSurgeryScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSurgeryScheduleCompleted(this, new UpdateSurgeryScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/DeleteSurgerySchedule", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteSurgerySchedule(string pScheduleID, string pRepID, string pCoID) {
            object[] results = this.Invoke("DeleteSurgerySchedule", new object[] {
                        pScheduleID,
                        pRepID,
                        pCoID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteSurgeryScheduleAsync(string pScheduleID, string pRepID, string pCoID) {
            this.DeleteSurgeryScheduleAsync(pScheduleID, pRepID, pCoID, null);
        }
        
        /// <remarks/>
        public void DeleteSurgeryScheduleAsync(string pScheduleID, string pRepID, string pCoID, object userState) {
            if ((this.DeleteSurgeryScheduleOperationCompleted == null)) {
                this.DeleteSurgeryScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSurgeryScheduleOperationCompleted);
            }
            this.InvokeAsync("DeleteSurgerySchedule", new object[] {
                        pScheduleID,
                        pRepID,
                        pCoID}, this.DeleteSurgeryScheduleOperationCompleted, userState);
        }
        
        private void OnDeleteSurgeryScheduleOperationCompleted(object arg) {
            if ((this.DeleteSurgeryScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSurgeryScheduleCompleted(this, new DeleteSurgeryScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetSurgerySchedule", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSurgerySchedule(string pRepID, string pCoID, string pEventID) {
            object[] results = this.Invoke("GetSurgerySchedule", new object[] {
                        pRepID,
                        pCoID,
                        pEventID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSurgeryScheduleAsync(string pRepID, string pCoID, string pEventID) {
            this.GetSurgeryScheduleAsync(pRepID, pCoID, pEventID, null);
        }
        
        /// <remarks/>
        public void GetSurgeryScheduleAsync(string pRepID, string pCoID, string pEventID, object userState) {
            if ((this.GetSurgeryScheduleOperationCompleted == null)) {
                this.GetSurgeryScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSurgeryScheduleOperationCompleted);
            }
            this.InvokeAsync("GetSurgerySchedule", new object[] {
                        pRepID,
                        pCoID,
                        pEventID}, this.GetSurgeryScheduleOperationCompleted, userState);
        }
        
        private void OnGetSurgeryScheduleOperationCompleted(object arg) {
            if ((this.GetSurgeryScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSurgeryScheduleCompleted(this, new GetSurgeryScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/SaveRandomTrays", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveRandomTrays(string pRepID, string pCoID, string pTrayNumber, string pDescription, string pManufacturer, double lat, double lon, string trayType) {
            object[] results = this.Invoke("SaveRandomTrays", new object[] {
                        pRepID,
                        pCoID,
                        pTrayNumber,
                        pDescription,
                        pManufacturer,
                        lat,
                        lon,
                        trayType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveRandomTraysAsync(string pRepID, string pCoID, string pTrayNumber, string pDescription, string pManufacturer, double lat, double lon, string trayType) {
            this.SaveRandomTraysAsync(pRepID, pCoID, pTrayNumber, pDescription, pManufacturer, lat, lon, trayType, null);
        }
        
        /// <remarks/>
        public void SaveRandomTraysAsync(string pRepID, string pCoID, string pTrayNumber, string pDescription, string pManufacturer, double lat, double lon, string trayType, object userState) {
            if ((this.SaveRandomTraysOperationCompleted == null)) {
                this.SaveRandomTraysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveRandomTraysOperationCompleted);
            }
            this.InvokeAsync("SaveRandomTrays", new object[] {
                        pRepID,
                        pCoID,
                        pTrayNumber,
                        pDescription,
                        pManufacturer,
                        lat,
                        lon,
                        trayType}, this.SaveRandomTraysOperationCompleted, userState);
        }
        
        private void OnSaveRandomTraysOperationCompleted(object arg) {
            if ((this.SaveRandomTraysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveRandomTraysCompleted(this, new SaveRandomTraysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetAllTrayTypesByCompany", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAllTrayTypesByCompany(string pCoID) {
            object[] results = this.Invoke("GetAllTrayTypesByCompany", new object[] {
                        pCoID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllTrayTypesByCompanyAsync(string pCoID) {
            this.GetAllTrayTypesByCompanyAsync(pCoID, null);
        }
        
        /// <remarks/>
        public void GetAllTrayTypesByCompanyAsync(string pCoID, object userState) {
            if ((this.GetAllTrayTypesByCompanyOperationCompleted == null)) {
                this.GetAllTrayTypesByCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllTrayTypesByCompanyOperationCompleted);
            }
            this.InvokeAsync("GetAllTrayTypesByCompany", new object[] {
                        pCoID}, this.GetAllTrayTypesByCompanyOperationCompleted, userState);
        }
        
        private void OnGetAllTrayTypesByCompanyOperationCompleted(object arg) {
            if ((this.GetAllTrayTypesByCompanyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllTrayTypesByCompanyCompleted(this, new GetAllTrayTypesByCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/SaveRandomDevice", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveRandomDevice(string pRepID, string pCoID, string pTrayNumber, string pDescription, string pManufacturer, string pPartID, string pLotID, int quan, double lat, double lon) {
            object[] results = this.Invoke("SaveRandomDevice", new object[] {
                        pRepID,
                        pCoID,
                        pTrayNumber,
                        pDescription,
                        pManufacturer,
                        pPartID,
                        pLotID,
                        quan,
                        lat,
                        lon});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveRandomDeviceAsync(string pRepID, string pCoID, string pTrayNumber, string pDescription, string pManufacturer, string pPartID, string pLotID, int quan, double lat, double lon) {
            this.SaveRandomDeviceAsync(pRepID, pCoID, pTrayNumber, pDescription, pManufacturer, pPartID, pLotID, quan, lat, lon, null);
        }
        
        /// <remarks/>
        public void SaveRandomDeviceAsync(string pRepID, string pCoID, string pTrayNumber, string pDescription, string pManufacturer, string pPartID, string pLotID, int quan, double lat, double lon, object userState) {
            if ((this.SaveRandomDeviceOperationCompleted == null)) {
                this.SaveRandomDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveRandomDeviceOperationCompleted);
            }
            this.InvokeAsync("SaveRandomDevice", new object[] {
                        pRepID,
                        pCoID,
                        pTrayNumber,
                        pDescription,
                        pManufacturer,
                        pPartID,
                        pLotID,
                        quan,
                        lat,
                        lon}, this.SaveRandomDeviceOperationCompleted, userState);
        }
        
        private void OnSaveRandomDeviceOperationCompleted(object arg) {
            if ((this.SaveRandomDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveRandomDeviceCompleted(this, new SaveRandomDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/SaveRandomBiologic", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveRandomBiologic(string pRepID, string pCoID, string pTrayNumber, string pDescription, string pManufacturer, string pPartID, string pLotID, string pExpirationDate, int quan, double lat, double lon, int pDeviceID) {
            object[] results = this.Invoke("SaveRandomBiologic", new object[] {
                        pRepID,
                        pCoID,
                        pTrayNumber,
                        pDescription,
                        pManufacturer,
                        pPartID,
                        pLotID,
                        pExpirationDate,
                        quan,
                        lat,
                        lon,
                        pDeviceID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveRandomBiologicAsync(string pRepID, string pCoID, string pTrayNumber, string pDescription, string pManufacturer, string pPartID, string pLotID, string pExpirationDate, int quan, double lat, double lon, int pDeviceID) {
            this.SaveRandomBiologicAsync(pRepID, pCoID, pTrayNumber, pDescription, pManufacturer, pPartID, pLotID, pExpirationDate, quan, lat, lon, pDeviceID, null);
        }
        
        /// <remarks/>
        public void SaveRandomBiologicAsync(string pRepID, string pCoID, string pTrayNumber, string pDescription, string pManufacturer, string pPartID, string pLotID, string pExpirationDate, int quan, double lat, double lon, int pDeviceID, object userState) {
            if ((this.SaveRandomBiologicOperationCompleted == null)) {
                this.SaveRandomBiologicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveRandomBiologicOperationCompleted);
            }
            this.InvokeAsync("SaveRandomBiologic", new object[] {
                        pRepID,
                        pCoID,
                        pTrayNumber,
                        pDescription,
                        pManufacturer,
                        pPartID,
                        pLotID,
                        pExpirationDate,
                        quan,
                        lat,
                        lon,
                        pDeviceID}, this.SaveRandomBiologicOperationCompleted, userState);
        }
        
        private void OnSaveRandomBiologicOperationCompleted(object arg) {
            if ((this.SaveRandomBiologicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveRandomBiologicCompleted(this, new SaveRandomBiologicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/InsertTrayNotes", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertTrayNotes(string pRepID, string pCoID, string pTrayID, string pNotes) {
            object[] results = this.Invoke("InsertTrayNotes", new object[] {
                        pRepID,
                        pCoID,
                        pTrayID,
                        pNotes});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertTrayNotesAsync(string pRepID, string pCoID, string pTrayID, string pNotes) {
            this.InsertTrayNotesAsync(pRepID, pCoID, pTrayID, pNotes, null);
        }
        
        /// <remarks/>
        public void InsertTrayNotesAsync(string pRepID, string pCoID, string pTrayID, string pNotes, object userState) {
            if ((this.InsertTrayNotesOperationCompleted == null)) {
                this.InsertTrayNotesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertTrayNotesOperationCompleted);
            }
            this.InvokeAsync("InsertTrayNotes", new object[] {
                        pRepID,
                        pCoID,
                        pTrayID,
                        pNotes}, this.InsertTrayNotesOperationCompleted, userState);
        }
        
        private void OnInsertTrayNotesOperationCompleted(object arg) {
            if ((this.InsertTrayNotesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertTrayNotesCompleted(this, new InsertTrayNotesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/SaveRandomInventory", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveRandomInventory(string pRepID, string pCoID, string pTrayNumber, string pPartDescription, string pPartID, string pLotID, string quan, double lat, double lon, string pExp) {
            object[] results = this.Invoke("SaveRandomInventory", new object[] {
                        pRepID,
                        pCoID,
                        pTrayNumber,
                        pPartDescription,
                        pPartID,
                        pLotID,
                        quan,
                        lat,
                        lon,
                        pExp});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveRandomInventoryAsync(string pRepID, string pCoID, string pTrayNumber, string pPartDescription, string pPartID, string pLotID, string quan, double lat, double lon, string pExp) {
            this.SaveRandomInventoryAsync(pRepID, pCoID, pTrayNumber, pPartDescription, pPartID, pLotID, quan, lat, lon, pExp, null);
        }
        
        /// <remarks/>
        public void SaveRandomInventoryAsync(string pRepID, string pCoID, string pTrayNumber, string pPartDescription, string pPartID, string pLotID, string quan, double lat, double lon, string pExp, object userState) {
            if ((this.SaveRandomInventoryOperationCompleted == null)) {
                this.SaveRandomInventoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveRandomInventoryOperationCompleted);
            }
            this.InvokeAsync("SaveRandomInventory", new object[] {
                        pRepID,
                        pCoID,
                        pTrayNumber,
                        pPartDescription,
                        pPartID,
                        pLotID,
                        quan,
                        lat,
                        lon,
                        pExp}, this.SaveRandomInventoryOperationCompleted, userState);
        }
        
        private void OnSaveRandomInventoryOperationCompleted(object arg) {
            if ((this.SaveRandomInventoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveRandomInventoryCompleted(this, new SaveRandomInventoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetNews", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetNews(string CoID, string RepID) {
            object[] results = this.Invoke("GetNews", new object[] {
                        CoID,
                        RepID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetNewsAsync(string CoID, string RepID) {
            this.GetNewsAsync(CoID, RepID, null);
        }
        
        /// <remarks/>
        public void GetNewsAsync(string CoID, string RepID, object userState) {
            if ((this.GetNewsOperationCompleted == null)) {
                this.GetNewsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNewsOperationCompleted);
            }
            this.InvokeAsync("GetNews", new object[] {
                        CoID,
                        RepID}, this.GetNewsOperationCompleted, userState);
        }
        
        private void OnGetNewsOperationCompleted(object arg) {
            if ((this.GetNewsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNewsCompleted(this, new GetNewsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetAlertValues", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAlertValues(string CoID, string RepID) {
            object[] results = this.Invoke("GetAlertValues", new object[] {
                        CoID,
                        RepID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAlertValuesAsync(string CoID, string RepID) {
            this.GetAlertValuesAsync(CoID, RepID, null);
        }
        
        /// <remarks/>
        public void GetAlertValuesAsync(string CoID, string RepID, object userState) {
            if ((this.GetAlertValuesOperationCompleted == null)) {
                this.GetAlertValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAlertValuesOperationCompleted);
            }
            this.InvokeAsync("GetAlertValues", new object[] {
                        CoID,
                        RepID}, this.GetAlertValuesOperationCompleted, userState);
        }
        
        private void OnGetAlertValuesOperationCompleted(object arg) {
            if ((this.GetAlertValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAlertValuesCompleted(this, new GetAlertValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetRevenue", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRevenue(string pCoID, string pRepID, string pType) {
            object[] results = this.Invoke("GetRevenue", new object[] {
                        pCoID,
                        pRepID,
                        pType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRevenueAsync(string pCoID, string pRepID, string pType) {
            this.GetRevenueAsync(pCoID, pRepID, pType, null);
        }
        
        /// <remarks/>
        public void GetRevenueAsync(string pCoID, string pRepID, string pType, object userState) {
            if ((this.GetRevenueOperationCompleted == null)) {
                this.GetRevenueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRevenueOperationCompleted);
            }
            this.InvokeAsync("GetRevenue", new object[] {
                        pCoID,
                        pRepID,
                        pType}, this.GetRevenueOperationCompleted, userState);
        }
        
        private void OnGetRevenueOperationCompleted(object arg) {
            if ((this.GetRevenueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRevenueCompleted(this, new GetRevenueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetAddressByCoordinatesForPhone", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAddressByCoordinatesForPhone(double lat, double lon) {
            object[] results = this.Invoke("GetAddressByCoordinatesForPhone", new object[] {
                        lat,
                        lon});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAddressByCoordinatesForPhoneAsync(double lat, double lon) {
            this.GetAddressByCoordinatesForPhoneAsync(lat, lon, null);
        }
        
        /// <remarks/>
        public void GetAddressByCoordinatesForPhoneAsync(double lat, double lon, object userState) {
            if ((this.GetAddressByCoordinatesForPhoneOperationCompleted == null)) {
                this.GetAddressByCoordinatesForPhoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAddressByCoordinatesForPhoneOperationCompleted);
            }
            this.InvokeAsync("GetAddressByCoordinatesForPhone", new object[] {
                        lat,
                        lon}, this.GetAddressByCoordinatesForPhoneOperationCompleted, userState);
        }
        
        private void OnGetAddressByCoordinatesForPhoneOperationCompleted(object arg) {
            if ((this.GetAddressByCoordinatesForPhoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAddressByCoordinatesForPhoneCompleted(this, new GetAddressByCoordinatesForPhoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetChatMessages", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetChatMessages(int repIDTo, int repIDFrom, int CoID, int Amount) {
            object[] results = this.Invoke("GetChatMessages", new object[] {
                        repIDTo,
                        repIDFrom,
                        CoID,
                        Amount});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetChatMessagesAsync(int repIDTo, int repIDFrom, int CoID, int Amount) {
            this.GetChatMessagesAsync(repIDTo, repIDFrom, CoID, Amount, null);
        }
        
        /// <remarks/>
        public void GetChatMessagesAsync(int repIDTo, int repIDFrom, int CoID, int Amount, object userState) {
            if ((this.GetChatMessagesOperationCompleted == null)) {
                this.GetChatMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChatMessagesOperationCompleted);
            }
            this.InvokeAsync("GetChatMessages", new object[] {
                        repIDTo,
                        repIDFrom,
                        CoID,
                        Amount}, this.GetChatMessagesOperationCompleted, userState);
        }
        
        private void OnGetChatMessagesOperationCompleted(object arg) {
            if ((this.GetChatMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChatMessagesCompleted(this, new GetChatMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/ReturnChatReps", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ReturnChatReps(string repID, string coID) {
            object[] results = this.Invoke("ReturnChatReps", new object[] {
                        repID,
                        coID});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ReturnChatRepsAsync(string repID, string coID) {
            this.ReturnChatRepsAsync(repID, coID, null);
        }
        
        /// <remarks/>
        public void ReturnChatRepsAsync(string repID, string coID, object userState) {
            if ((this.ReturnChatRepsOperationCompleted == null)) {
                this.ReturnChatRepsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReturnChatRepsOperationCompleted);
            }
            this.InvokeAsync("ReturnChatReps", new object[] {
                        repID,
                        coID}, this.ReturnChatRepsOperationCompleted, userState);
        }
        
        private void OnReturnChatRepsOperationCompleted(object arg) {
            if ((this.ReturnChatRepsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReturnChatRepsCompleted(this, new ReturnChatRepsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/AddInventoryByTrayLotPart", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddInventoryByTrayLotPart(string pEventID, string pTrayNumber, string pLotNumber, string pPartNumber, string pCoID, string pRepID, double pLat, double pLong) {
            object[] results = this.Invoke("AddInventoryByTrayLotPart", new object[] {
                        pEventID,
                        pTrayNumber,
                        pLotNumber,
                        pPartNumber,
                        pCoID,
                        pRepID,
                        pLat,
                        pLong});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddInventoryByTrayLotPartAsync(string pEventID, string pTrayNumber, string pLotNumber, string pPartNumber, string pCoID, string pRepID, double pLat, double pLong) {
            this.AddInventoryByTrayLotPartAsync(pEventID, pTrayNumber, pLotNumber, pPartNumber, pCoID, pRepID, pLat, pLong, null);
        }
        
        /// <remarks/>
        public void AddInventoryByTrayLotPartAsync(string pEventID, string pTrayNumber, string pLotNumber, string pPartNumber, string pCoID, string pRepID, double pLat, double pLong, object userState) {
            if ((this.AddInventoryByTrayLotPartOperationCompleted == null)) {
                this.AddInventoryByTrayLotPartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddInventoryByTrayLotPartOperationCompleted);
            }
            this.InvokeAsync("AddInventoryByTrayLotPart", new object[] {
                        pEventID,
                        pTrayNumber,
                        pLotNumber,
                        pPartNumber,
                        pCoID,
                        pRepID,
                        pLat,
                        pLong}, this.AddInventoryByTrayLotPartOperationCompleted, userState);
        }
        
        private void OnAddInventoryByTrayLotPartOperationCompleted(object arg) {
            if ((this.AddInventoryByTrayLotPartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddInventoryByTrayLotPartCompleted(this, new AddInventoryByTrayLotPartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/PurgeInventory", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PurgeInventory(bool isDevice, string pTrayID, string pLotNumber, string pPartNumber, string pCoID, string pRepID, string pEventID, string Notes, string Quan, double pPrice, string pPatient, string isImplant) {
            object[] results = this.Invoke("PurgeInventory", new object[] {
                        isDevice,
                        pTrayID,
                        pLotNumber,
                        pPartNumber,
                        pCoID,
                        pRepID,
                        pEventID,
                        Notes,
                        Quan,
                        pPrice,
                        pPatient,
                        isImplant});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PurgeInventoryAsync(bool isDevice, string pTrayID, string pLotNumber, string pPartNumber, string pCoID, string pRepID, string pEventID, string Notes, string Quan, double pPrice, string pPatient, string isImplant) {
            this.PurgeInventoryAsync(isDevice, pTrayID, pLotNumber, pPartNumber, pCoID, pRepID, pEventID, Notes, Quan, pPrice, pPatient, isImplant, null);
        }
        
        /// <remarks/>
        public void PurgeInventoryAsync(bool isDevice, string pTrayID, string pLotNumber, string pPartNumber, string pCoID, string pRepID, string pEventID, string Notes, string Quan, double pPrice, string pPatient, string isImplant, object userState) {
            if ((this.PurgeInventoryOperationCompleted == null)) {
                this.PurgeInventoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurgeInventoryOperationCompleted);
            }
            this.InvokeAsync("PurgeInventory", new object[] {
                        isDevice,
                        pTrayID,
                        pLotNumber,
                        pPartNumber,
                        pCoID,
                        pRepID,
                        pEventID,
                        Notes,
                        Quan,
                        pPrice,
                        pPatient,
                        isImplant}, this.PurgeInventoryOperationCompleted, userState);
        }
        
        private void OnPurgeInventoryOperationCompleted(object arg) {
            if ((this.PurgeInventoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurgeInventoryCompleted(this, new PurgeInventoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/PurgeInventoryEncrypt", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PurgeInventoryEncrypt(bool isDevice, string pTrayID, string pLotNumber, string pPartNumber, string pCoID, string pRepID, string pEventID, string Notes, string Quan, double pPrice, string pPatient, string isImplant) {
            object[] results = this.Invoke("PurgeInventoryEncrypt", new object[] {
                        isDevice,
                        pTrayID,
                        pLotNumber,
                        pPartNumber,
                        pCoID,
                        pRepID,
                        pEventID,
                        Notes,
                        Quan,
                        pPrice,
                        pPatient,
                        isImplant});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PurgeInventoryEncryptAsync(bool isDevice, string pTrayID, string pLotNumber, string pPartNumber, string pCoID, string pRepID, string pEventID, string Notes, string Quan, double pPrice, string pPatient, string isImplant) {
            this.PurgeInventoryEncryptAsync(isDevice, pTrayID, pLotNumber, pPartNumber, pCoID, pRepID, pEventID, Notes, Quan, pPrice, pPatient, isImplant, null);
        }
        
        /// <remarks/>
        public void PurgeInventoryEncryptAsync(bool isDevice, string pTrayID, string pLotNumber, string pPartNumber, string pCoID, string pRepID, string pEventID, string Notes, string Quan, double pPrice, string pPatient, string isImplant, object userState) {
            if ((this.PurgeInventoryEncryptOperationCompleted == null)) {
                this.PurgeInventoryEncryptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurgeInventoryEncryptOperationCompleted);
            }
            this.InvokeAsync("PurgeInventoryEncrypt", new object[] {
                        isDevice,
                        pTrayID,
                        pLotNumber,
                        pPartNumber,
                        pCoID,
                        pRepID,
                        pEventID,
                        Notes,
                        Quan,
                        pPrice,
                        pPatient,
                        isImplant}, this.PurgeInventoryEncryptOperationCompleted, userState);
        }
        
        private void OnPurgeInventoryEncryptOperationCompleted(object arg) {
            if ((this.PurgeInventoryEncryptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurgeInventoryEncryptCompleted(this, new PurgeInventoryEncryptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/InsertLoanerShipInfo", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertLoanerShipInfo(string[] pTrayNumber, string pRepID, string pCoID, string pTrackNumber, string pNotes) {
            object[] results = this.Invoke("InsertLoanerShipInfo", new object[] {
                        pTrayNumber,
                        pRepID,
                        pCoID,
                        pTrackNumber,
                        pNotes});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertLoanerShipInfoAsync(string[] pTrayNumber, string pRepID, string pCoID, string pTrackNumber, string pNotes) {
            this.InsertLoanerShipInfoAsync(pTrayNumber, pRepID, pCoID, pTrackNumber, pNotes, null);
        }
        
        /// <remarks/>
        public void InsertLoanerShipInfoAsync(string[] pTrayNumber, string pRepID, string pCoID, string pTrackNumber, string pNotes, object userState) {
            if ((this.InsertLoanerShipInfoOperationCompleted == null)) {
                this.InsertLoanerShipInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertLoanerShipInfoOperationCompleted);
            }
            this.InvokeAsync("InsertLoanerShipInfo", new object[] {
                        pTrayNumber,
                        pRepID,
                        pCoID,
                        pTrackNumber,
                        pNotes}, this.InsertLoanerShipInfoOperationCompleted, userState);
        }
        
        private void OnInsertLoanerShipInfoOperationCompleted(object arg) {
            if ((this.InsertLoanerShipInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertLoanerShipInfoCompleted(this, new InsertLoanerShipInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/AllManufactures", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AllManufactures(string RepID, string CoID) {
            object[] results = this.Invoke("AllManufactures", new object[] {
                        RepID,
                        CoID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AllManufacturesAsync(string RepID, string CoID) {
            this.AllManufacturesAsync(RepID, CoID, null);
        }
        
        /// <remarks/>
        public void AllManufacturesAsync(string RepID, string CoID, object userState) {
            if ((this.AllManufacturesOperationCompleted == null)) {
                this.AllManufacturesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAllManufacturesOperationCompleted);
            }
            this.InvokeAsync("AllManufactures", new object[] {
                        RepID,
                        CoID}, this.AllManufacturesOperationCompleted, userState);
        }
        
        private void OnAllManufacturesOperationCompleted(object arg) {
            if ((this.AllManufacturesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AllManufacturesCompleted(this, new AllManufacturesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetZonesByRepID", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetZonesByRepID(string pRepID) {
            object[] results = this.Invoke("GetZonesByRepID", new object[] {
                        pRepID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetZonesByRepIDAsync(string pRepID) {
            this.GetZonesByRepIDAsync(pRepID, null);
        }
        
        /// <remarks/>
        public void GetZonesByRepIDAsync(string pRepID, object userState) {
            if ((this.GetZonesByRepIDOperationCompleted == null)) {
                this.GetZonesByRepIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetZonesByRepIDOperationCompleted);
            }
            this.InvokeAsync("GetZonesByRepID", new object[] {
                        pRepID}, this.GetZonesByRepIDOperationCompleted, userState);
        }
        
        private void OnGetZonesByRepIDOperationCompleted(object arg) {
            if ((this.GetZonesByRepIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetZonesByRepIDCompleted(this, new GetZonesByRepIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/ValidatePasscode", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidatePasscode(string pPasscode, string pEmail) {
            object[] results = this.Invoke("ValidatePasscode", new object[] {
                        pPasscode,
                        pEmail});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidatePasscodeAsync(string pPasscode, string pEmail) {
            this.ValidatePasscodeAsync(pPasscode, pEmail, null);
        }
        
        /// <remarks/>
        public void ValidatePasscodeAsync(string pPasscode, string pEmail, object userState) {
            if ((this.ValidatePasscodeOperationCompleted == null)) {
                this.ValidatePasscodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidatePasscodeOperationCompleted);
            }
            this.InvokeAsync("ValidatePasscode", new object[] {
                        pPasscode,
                        pEmail}, this.ValidatePasscodeOperationCompleted, userState);
        }
        
        private void OnValidatePasscodeOperationCompleted(object arg) {
            if ((this.ValidatePasscodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidatePasscodeCompleted(this, new ValidatePasscodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetPartNumbersByRepID", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPartNumbersByRepID(string pCoID, string pRepID, string pIsSuper, string pTrayNumber, string pCaseID, string pZoneID) {
            object[] results = this.Invoke("GetPartNumbersByRepID", new object[] {
                        pCoID,
                        pRepID,
                        pIsSuper,
                        pTrayNumber,
                        pCaseID,
                        pZoneID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPartNumbersByRepIDAsync(string pCoID, string pRepID, string pIsSuper, string pTrayNumber, string pCaseID, string pZoneID) {
            this.GetPartNumbersByRepIDAsync(pCoID, pRepID, pIsSuper, pTrayNumber, pCaseID, pZoneID, null);
        }
        
        /// <remarks/>
        public void GetPartNumbersByRepIDAsync(string pCoID, string pRepID, string pIsSuper, string pTrayNumber, string pCaseID, string pZoneID, object userState) {
            if ((this.GetPartNumbersByRepIDOperationCompleted == null)) {
                this.GetPartNumbersByRepIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPartNumbersByRepIDOperationCompleted);
            }
            this.InvokeAsync("GetPartNumbersByRepID", new object[] {
                        pCoID,
                        pRepID,
                        pIsSuper,
                        pTrayNumber,
                        pCaseID,
                        pZoneID}, this.GetPartNumbersByRepIDOperationCompleted, userState);
        }
        
        private void OnGetPartNumbersByRepIDOperationCompleted(object arg) {
            if ((this.GetPartNumbersByRepIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPartNumbersByRepIDCompleted(this, new GetPartNumbersByRepIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetTraysByLotOrPartNumber", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTraysByLotOrPartNumber(string pCoID, string pRepID, string isSuper, string pLotNumber, string pZoneID) {
            object[] results = this.Invoke("GetTraysByLotOrPartNumber", new object[] {
                        pCoID,
                        pRepID,
                        isSuper,
                        pLotNumber,
                        pZoneID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTraysByLotOrPartNumberAsync(string pCoID, string pRepID, string isSuper, string pLotNumber, string pZoneID) {
            this.GetTraysByLotOrPartNumberAsync(pCoID, pRepID, isSuper, pLotNumber, pZoneID, null);
        }
        
        /// <remarks/>
        public void GetTraysByLotOrPartNumberAsync(string pCoID, string pRepID, string isSuper, string pLotNumber, string pZoneID, object userState) {
            if ((this.GetTraysByLotOrPartNumberOperationCompleted == null)) {
                this.GetTraysByLotOrPartNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTraysByLotOrPartNumberOperationCompleted);
            }
            this.InvokeAsync("GetTraysByLotOrPartNumber", new object[] {
                        pCoID,
                        pRepID,
                        isSuper,
                        pLotNumber,
                        pZoneID}, this.GetTraysByLotOrPartNumberOperationCompleted, userState);
        }
        
        private void OnGetTraysByLotOrPartNumberOperationCompleted(object arg) {
            if ((this.GetTraysByLotOrPartNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTraysByLotOrPartNumberCompleted(this, new GetTraysByLotOrPartNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetTraysByLotOrPartNumberEncrypt", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetTraysByLotOrPartNumberEncrypt(string pCoID, string pRepID, string isSuper, string pLotNumber, string username, string password) {
            object[] results = this.Invoke("GetTraysByLotOrPartNumberEncrypt", new object[] {
                        pCoID,
                        pRepID,
                        isSuper,
                        pLotNumber,
                        username,
                        password});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTraysByLotOrPartNumberEncryptAsync(string pCoID, string pRepID, string isSuper, string pLotNumber, string username, string password) {
            this.GetTraysByLotOrPartNumberEncryptAsync(pCoID, pRepID, isSuper, pLotNumber, username, password, null);
        }
        
        /// <remarks/>
        public void GetTraysByLotOrPartNumberEncryptAsync(string pCoID, string pRepID, string isSuper, string pLotNumber, string username, string password, object userState) {
            if ((this.GetTraysByLotOrPartNumberEncryptOperationCompleted == null)) {
                this.GetTraysByLotOrPartNumberEncryptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTraysByLotOrPartNumberEncryptOperationCompleted);
            }
            this.InvokeAsync("GetTraysByLotOrPartNumberEncrypt", new object[] {
                        pCoID,
                        pRepID,
                        isSuper,
                        pLotNumber,
                        username,
                        password}, this.GetTraysByLotOrPartNumberEncryptOperationCompleted, userState);
        }
        
        private void OnGetTraysByLotOrPartNumberEncryptOperationCompleted(object arg) {
            if ((this.GetTraysByLotOrPartNumberEncryptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTraysByLotOrPartNumberEncryptCompleted(this, new GetTraysByLotOrPartNumberEncryptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/InsertInstrumentUsageCount", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertInstrumentUsageCount(string pCoID, string pRepID, string pTrayInfo) {
            object[] results = this.Invoke("InsertInstrumentUsageCount", new object[] {
                        pCoID,
                        pRepID,
                        pTrayInfo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertInstrumentUsageCountAsync(string pCoID, string pRepID, string pTrayInfo) {
            this.InsertInstrumentUsageCountAsync(pCoID, pRepID, pTrayInfo, null);
        }
        
        /// <remarks/>
        public void InsertInstrumentUsageCountAsync(string pCoID, string pRepID, string pTrayInfo, object userState) {
            if ((this.InsertInstrumentUsageCountOperationCompleted == null)) {
                this.InsertInstrumentUsageCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertInstrumentUsageCountOperationCompleted);
            }
            this.InvokeAsync("InsertInstrumentUsageCount", new object[] {
                        pCoID,
                        pRepID,
                        pTrayInfo}, this.InsertInstrumentUsageCountOperationCompleted, userState);
        }
        
        private void OnInsertInstrumentUsageCountOperationCompleted(object arg) {
            if ((this.InsertInstrumentUsageCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertInstrumentUsageCountCompleted(this, new InsertInstrumentUsageCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetPurgedPartNumbersByRepID", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPurgedPartNumbersByRepID(string pCoID, string pRepID, string isSuper, string pTrayNumber) {
            object[] results = this.Invoke("GetPurgedPartNumbersByRepID", new object[] {
                        pCoID,
                        pRepID,
                        isSuper,
                        pTrayNumber});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPurgedPartNumbersByRepIDAsync(string pCoID, string pRepID, string isSuper, string pTrayNumber) {
            this.GetPurgedPartNumbersByRepIDAsync(pCoID, pRepID, isSuper, pTrayNumber, null);
        }
        
        /// <remarks/>
        public void GetPurgedPartNumbersByRepIDAsync(string pCoID, string pRepID, string isSuper, string pTrayNumber, object userState) {
            if ((this.GetPurgedPartNumbersByRepIDOperationCompleted == null)) {
                this.GetPurgedPartNumbersByRepIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPurgedPartNumbersByRepIDOperationCompleted);
            }
            this.InvokeAsync("GetPurgedPartNumbersByRepID", new object[] {
                        pCoID,
                        pRepID,
                        isSuper,
                        pTrayNumber}, this.GetPurgedPartNumbersByRepIDOperationCompleted, userState);
        }
        
        private void OnGetPurgedPartNumbersByRepIDOperationCompleted(object arg) {
            if ((this.GetPurgedPartNumbersByRepIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPurgedPartNumbersByRepIDCompleted(this, new GetPurgedPartNumbersByRepIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/HasRequest", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HasRequest(string pRepID) {
            object[] results = this.Invoke("HasRequest", new object[] {
                        pRepID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasRequestAsync(string pRepID) {
            this.HasRequestAsync(pRepID, null);
        }
        
        /// <remarks/>
        public void HasRequestAsync(string pRepID, object userState) {
            if ((this.HasRequestOperationCompleted == null)) {
                this.HasRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasRequestOperationCompleted);
            }
            this.InvokeAsync("HasRequest", new object[] {
                        pRepID}, this.HasRequestOperationCompleted, userState);
        }
        
        private void OnHasRequestOperationCompleted(object arg) {
            if ((this.HasRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasRequestCompleted(this, new HasRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/MakeRequest", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MakeRequest(string pRepID, string[] pTrayID) {
            object[] results = this.Invoke("MakeRequest", new object[] {
                        pRepID,
                        pTrayID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MakeRequestAsync(string pRepID, string[] pTrayID) {
            this.MakeRequestAsync(pRepID, pTrayID, null);
        }
        
        /// <remarks/>
        public void MakeRequestAsync(string pRepID, string[] pTrayID, object userState) {
            if ((this.MakeRequestOperationCompleted == null)) {
                this.MakeRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMakeRequestOperationCompleted);
            }
            this.InvokeAsync("MakeRequest", new object[] {
                        pRepID,
                        pTrayID}, this.MakeRequestOperationCompleted, userState);
        }
        
        private void OnMakeRequestOperationCompleted(object arg) {
            if ((this.MakeRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MakeRequestCompleted(this, new MakeRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/ReturnRepName", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReturnRepName(string pCoID) {
            object[] results = this.Invoke("ReturnRepName", new object[] {
                        pCoID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReturnRepNameAsync(string pCoID) {
            this.ReturnRepNameAsync(pCoID, null);
        }
        
        /// <remarks/>
        public void ReturnRepNameAsync(string pCoID, object userState) {
            if ((this.ReturnRepNameOperationCompleted == null)) {
                this.ReturnRepNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReturnRepNameOperationCompleted);
            }
            this.InvokeAsync("ReturnRepName", new object[] {
                        pCoID}, this.ReturnRepNameOperationCompleted, userState);
        }
        
        private void OnReturnRepNameOperationCompleted(object arg) {
            if ((this.ReturnRepNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReturnRepNameCompleted(this, new ReturnRepNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetInventoryByRadiusAndParams", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TrayInfo[] GetInventoryByRadiusAndParams(int company_id, int rep_id, double vlat, double vlon, int radius, string searchText, string searchType, string[] pZoneIDs) {
            object[] results = this.Invoke("GetInventoryByRadiusAndParams", new object[] {
                        company_id,
                        rep_id,
                        vlat,
                        vlon,
                        radius,
                        searchText,
                        searchType,
                        pZoneIDs});
            return ((TrayInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetInventoryByRadiusAndParamsAsync(int company_id, int rep_id, double vlat, double vlon, int radius, string searchText, string searchType, string[] pZoneIDs) {
            this.GetInventoryByRadiusAndParamsAsync(company_id, rep_id, vlat, vlon, radius, searchText, searchType, pZoneIDs, null);
        }
        
        /// <remarks/>
        public void GetInventoryByRadiusAndParamsAsync(int company_id, int rep_id, double vlat, double vlon, int radius, string searchText, string searchType, string[] pZoneIDs, object userState) {
            if ((this.GetInventoryByRadiusAndParamsOperationCompleted == null)) {
                this.GetInventoryByRadiusAndParamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInventoryByRadiusAndParamsOperationCompleted);
            }
            this.InvokeAsync("GetInventoryByRadiusAndParams", new object[] {
                        company_id,
                        rep_id,
                        vlat,
                        vlon,
                        radius,
                        searchText,
                        searchType,
                        pZoneIDs}, this.GetInventoryByRadiusAndParamsOperationCompleted, userState);
        }
        
        private void OnGetInventoryByRadiusAndParamsOperationCompleted(object arg) {
            if ((this.GetInventoryByRadiusAndParamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInventoryByRadiusAndParamsCompleted(this, new GetInventoryByRadiusAndParamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/ReceiverManagerGetScannedTrays", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReceiverManagerGetScannedTrays(string username, string password) {
            object[] results = this.Invoke("ReceiverManagerGetScannedTrays", new object[] {
                        username,
                        password});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReceiverManagerGetScannedTraysAsync(string username, string password) {
            this.ReceiverManagerGetScannedTraysAsync(username, password, null);
        }
        
        /// <remarks/>
        public void ReceiverManagerGetScannedTraysAsync(string username, string password, object userState) {
            if ((this.ReceiverManagerGetScannedTraysOperationCompleted == null)) {
                this.ReceiverManagerGetScannedTraysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReceiverManagerGetScannedTraysOperationCompleted);
            }
            this.InvokeAsync("ReceiverManagerGetScannedTrays", new object[] {
                        username,
                        password}, this.ReceiverManagerGetScannedTraysOperationCompleted, userState);
        }
        
        private void OnReceiverManagerGetScannedTraysOperationCompleted(object arg) {
            if ((this.ReceiverManagerGetScannedTraysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReceiverManagerGetScannedTraysCompleted(this, new ReceiverManagerGetScannedTraysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetTrayderRequests", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TrayderObject[] GetTrayderRequests(string pRepID, bool isMine) {
            object[] results = this.Invoke("GetTrayderRequests", new object[] {
                        pRepID,
                        isMine});
            return ((TrayderObject[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTrayderRequestsAsync(string pRepID, bool isMine) {
            this.GetTrayderRequestsAsync(pRepID, isMine, null);
        }
        
        /// <remarks/>
        public void GetTrayderRequestsAsync(string pRepID, bool isMine, object userState) {
            if ((this.GetTrayderRequestsOperationCompleted == null)) {
                this.GetTrayderRequestsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTrayderRequestsOperationCompleted);
            }
            this.InvokeAsync("GetTrayderRequests", new object[] {
                        pRepID,
                        isMine}, this.GetTrayderRequestsOperationCompleted, userState);
        }
        
        private void OnGetTrayderRequestsOperationCompleted(object arg) {
            if ((this.GetTrayderRequestsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTrayderRequestsCompleted(this, new GetTrayderRequestsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/TrayderAgree", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TrayderAgree(bool pYesNo, string pTrayderID) {
            object[] results = this.Invoke("TrayderAgree", new object[] {
                        pYesNo,
                        pTrayderID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TrayderAgreeAsync(bool pYesNo, string pTrayderID) {
            this.TrayderAgreeAsync(pYesNo, pTrayderID, null);
        }
        
        /// <remarks/>
        public void TrayderAgreeAsync(bool pYesNo, string pTrayderID, object userState) {
            if ((this.TrayderAgreeOperationCompleted == null)) {
                this.TrayderAgreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTrayderAgreeOperationCompleted);
            }
            this.InvokeAsync("TrayderAgree", new object[] {
                        pYesNo,
                        pTrayderID}, this.TrayderAgreeOperationCompleted, userState);
        }
        
        private void OnTrayderAgreeOperationCompleted(object arg) {
            if ((this.TrayderAgreeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TrayderAgreeCompleted(this, new TrayderAgreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetTrayDataByRepID", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTrayDataByRepID(string pRepID, string pCoID, string isSuper, string pZoneID) {
            object[] results = this.Invoke("GetTrayDataByRepID", new object[] {
                        pRepID,
                        pCoID,
                        isSuper,
                        pZoneID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTrayDataByRepIDAsync(string pRepID, string pCoID, string isSuper, string pZoneID) {
            this.GetTrayDataByRepIDAsync(pRepID, pCoID, isSuper, pZoneID, null);
        }
        
        /// <remarks/>
        public void GetTrayDataByRepIDAsync(string pRepID, string pCoID, string isSuper, string pZoneID, object userState) {
            if ((this.GetTrayDataByRepIDOperationCompleted == null)) {
                this.GetTrayDataByRepIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTrayDataByRepIDOperationCompleted);
            }
            this.InvokeAsync("GetTrayDataByRepID", new object[] {
                        pRepID,
                        pCoID,
                        isSuper,
                        pZoneID}, this.GetTrayDataByRepIDOperationCompleted, userState);
        }
        
        private void OnGetTrayDataByRepIDOperationCompleted(object arg) {
            if ((this.GetTrayDataByRepIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTrayDataByRepIDCompleted(this, new GetTrayDataByRepIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/TEST", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TEST() {
            this.Invoke("TEST", new object[0]);
        }
        
        /// <remarks/>
        public void TESTAsync() {
            this.TESTAsync(null);
        }
        
        /// <remarks/>
        public void TESTAsync(object userState) {
            if ((this.TESTOperationCompleted == null)) {
                this.TESTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTESTOperationCompleted);
            }
            this.InvokeAsync("TEST", new object[0], this.TESTOperationCompleted, userState);
        }
        
        private void OnTESTOperationCompleted(object arg) {
            if ((this.TESTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TESTCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/RetrieveLoanerTrayList", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RetrieveLoanerTrayList(string username, string password) {
            object[] results = this.Invoke("RetrieveLoanerTrayList", new object[] {
                        username,
                        password});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveLoanerTrayListAsync(string username, string password) {
            this.RetrieveLoanerTrayListAsync(username, password, null);
        }
        
        /// <remarks/>
        public void RetrieveLoanerTrayListAsync(string username, string password, object userState) {
            if ((this.RetrieveLoanerTrayListOperationCompleted == null)) {
                this.RetrieveLoanerTrayListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveLoanerTrayListOperationCompleted);
            }
            this.InvokeAsync("RetrieveLoanerTrayList", new object[] {
                        username,
                        password}, this.RetrieveLoanerTrayListOperationCompleted, userState);
        }
        
        private void OnRetrieveLoanerTrayListOperationCompleted(object arg) {
            if ((this.RetrieveLoanerTrayListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveLoanerTrayListCompleted(this, new RetrieveLoanerTrayListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetDoctors", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDoctors(string RepID, string CoID) {
            object[] results = this.Invoke("GetDoctors", new object[] {
                        RepID,
                        CoID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDoctorsAsync(string RepID, string CoID) {
            this.GetDoctorsAsync(RepID, CoID, null);
        }
        
        /// <remarks/>
        public void GetDoctorsAsync(string RepID, string CoID, object userState) {
            if ((this.GetDoctorsOperationCompleted == null)) {
                this.GetDoctorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDoctorsOperationCompleted);
            }
            this.InvokeAsync("GetDoctors", new object[] {
                        RepID,
                        CoID}, this.GetDoctorsOperationCompleted, userState);
        }
        
        private void OnGetDoctorsOperationCompleted(object arg) {
            if ((this.GetDoctorsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDoctorsCompleted(this, new GetDoctorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetShippingAddressByRepAndCo", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CompoundAddressEmail GetShippingAddressByRepAndCo(string CoID, string RepID) {
            object[] results = this.Invoke("GetShippingAddressByRepAndCo", new object[] {
                        CoID,
                        RepID});
            return ((CompoundAddressEmail)(results[0]));
        }
        
        /// <remarks/>
        public void GetShippingAddressByRepAndCoAsync(string CoID, string RepID) {
            this.GetShippingAddressByRepAndCoAsync(CoID, RepID, null);
        }
        
        /// <remarks/>
        public void GetShippingAddressByRepAndCoAsync(string CoID, string RepID, object userState) {
            if ((this.GetShippingAddressByRepAndCoOperationCompleted == null)) {
                this.GetShippingAddressByRepAndCoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetShippingAddressByRepAndCoOperationCompleted);
            }
            this.InvokeAsync("GetShippingAddressByRepAndCo", new object[] {
                        CoID,
                        RepID}, this.GetShippingAddressByRepAndCoOperationCompleted, userState);
        }
        
        private void OnGetShippingAddressByRepAndCoOperationCompleted(object arg) {
            if ((this.GetShippingAddressByRepAndCoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetShippingAddressByRepAndCoCompleted(this, new GetShippingAddressByRepAndCoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/GetSurgeryTypes", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CompoundNameType GetSurgeryTypes(string CoID, string RepID) {
            object[] results = this.Invoke("GetSurgeryTypes", new object[] {
                        CoID,
                        RepID});
            return ((CompoundNameType)(results[0]));
        }
        
        /// <remarks/>
        public void GetSurgeryTypesAsync(string CoID, string RepID) {
            this.GetSurgeryTypesAsync(CoID, RepID, null);
        }
        
        /// <remarks/>
        public void GetSurgeryTypesAsync(string CoID, string RepID, object userState) {
            if ((this.GetSurgeryTypesOperationCompleted == null)) {
                this.GetSurgeryTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSurgeryTypesOperationCompleted);
            }
            this.InvokeAsync("GetSurgeryTypes", new object[] {
                        CoID,
                        RepID}, this.GetSurgeryTypesOperationCompleted, userState);
        }
        
        private void OnGetSurgeryTypesOperationCompleted(object arg) {
            if ((this.GetSurgeryTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSurgeryTypesCompleted(this, new GetSurgeryTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.itraycer.mts/UpdateTrayByEntity", RequestNamespace="http://com.itraycer.mts/", ResponseNamespace="http://com.itraycer.mts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateTrayByEntity(TrayEntity TE) {
            object[] results = this.Invoke("UpdateTrayByEntity", new object[] {
                        TE});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateTrayByEntityAsync(TrayEntity TE) {
            this.UpdateTrayByEntityAsync(TE, null);
        }
        
        /// <remarks/>
        public void UpdateTrayByEntityAsync(TrayEntity TE, object userState) {
            if ((this.UpdateTrayByEntityOperationCompleted == null)) {
                this.UpdateTrayByEntityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTrayByEntityOperationCompleted);
            }
            this.InvokeAsync("UpdateTrayByEntity", new object[] {
                        TE}, this.UpdateTrayByEntityOperationCompleted, userState);
        }
        
        private void OnUpdateTrayByEntityOperationCompleted(object arg) {
            if ((this.UpdateTrayByEntityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTrayByEntityCompleted(this, new UpdateTrayByEntityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://com.itraycer.mts/")]
    public partial class TrayEntity {
        
        private string barcodeIDField;
        
        private string coordsLatitudeField;
        
        private int trayID1Field;
        
        private string coordsLongitudeField;
        
        private string createdDateField;
        
        private string customerIDField;
        
        private string fedexTrackingNumberField;
        
        private string manufIDField;
        
        private string repField;
        
        private string trayCurrentHolderField;
        
        private string trayDescriptionField;
        
        private string trayHandoverDateField;
        
        private string trayIDField;
        
        private string trayLocationField;
        
        private string trayNumberField;
        
        private string trayReceiptDateField;
        
        private string trayStatusField;
        
        private string trayWorkTypeField;
        
        private string kitIDField;
        
        private string _kitIDField;
        
        /// <remarks/>
        public string BarcodeID {
            get {
                return this.barcodeIDField;
            }
            set {
                this.barcodeIDField = value;
            }
        }
        
        /// <remarks/>
        public string CoordsLatitude {
            get {
                return this.coordsLatitudeField;
            }
            set {
                this.coordsLatitudeField = value;
            }
        }
        
        /// <remarks/>
        public int TrayID1 {
            get {
                return this.trayID1Field;
            }
            set {
                this.trayID1Field = value;
            }
        }
        
        /// <remarks/>
        public string CoordsLongitude {
            get {
                return this.coordsLongitudeField;
            }
            set {
                this.coordsLongitudeField = value;
            }
        }
        
        /// <remarks/>
        public string CreatedDate {
            get {
                return this.createdDateField;
            }
            set {
                this.createdDateField = value;
            }
        }
        
        /// <remarks/>
        public string CustomerID {
            get {
                return this.customerIDField;
            }
            set {
                this.customerIDField = value;
            }
        }
        
        /// <remarks/>
        public string FedexTrackingNumber {
            get {
                return this.fedexTrackingNumberField;
            }
            set {
                this.fedexTrackingNumberField = value;
            }
        }
        
        /// <remarks/>
        public string ManufID {
            get {
                return this.manufIDField;
            }
            set {
                this.manufIDField = value;
            }
        }
        
        /// <remarks/>
        public string Rep {
            get {
                return this.repField;
            }
            set {
                this.repField = value;
            }
        }
        
        /// <remarks/>
        public string TrayCurrentHolder {
            get {
                return this.trayCurrentHolderField;
            }
            set {
                this.trayCurrentHolderField = value;
            }
        }
        
        /// <remarks/>
        public string TrayDescription {
            get {
                return this.trayDescriptionField;
            }
            set {
                this.trayDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string TrayHandoverDate {
            get {
                return this.trayHandoverDateField;
            }
            set {
                this.trayHandoverDateField = value;
            }
        }
        
        /// <remarks/>
        public string TrayID {
            get {
                return this.trayIDField;
            }
            set {
                this.trayIDField = value;
            }
        }
        
        /// <remarks/>
        public string TrayLocation {
            get {
                return this.trayLocationField;
            }
            set {
                this.trayLocationField = value;
            }
        }
        
        /// <remarks/>
        public string TrayNumber {
            get {
                return this.trayNumberField;
            }
            set {
                this.trayNumberField = value;
            }
        }
        
        /// <remarks/>
        public string TrayReceiptDate {
            get {
                return this.trayReceiptDateField;
            }
            set {
                this.trayReceiptDateField = value;
            }
        }
        
        /// <remarks/>
        public string TrayStatus {
            get {
                return this.trayStatusField;
            }
            set {
                this.trayStatusField = value;
            }
        }
        
        /// <remarks/>
        public string TrayWorkType {
            get {
                return this.trayWorkTypeField;
            }
            set {
                this.trayWorkTypeField = value;
            }
        }
        
        /// <remarks/>
        public string KitID {
            get {
                return this.kitIDField;
            }
            set {
                this.kitIDField = value;
            }
        }
        
        /// <remarks/>
        public string _kitID {
            get {
                return this._kitIDField;
            }
            set {
                this._kitIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://com.itraycer.mts/")]
    public partial class CaseTypeValues {
        
        private int caseIdField;
        
        private string[] levelListField;
        
        private bool showThirdField;
        
        /// <remarks/>
        public int CaseId {
            get {
                return this.caseIdField;
            }
            set {
                this.caseIdField = value;
            }
        }
        
        /// <remarks/>
        public string[] LevelList {
            get {
                return this.levelListField;
            }
            set {
                this.levelListField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowThird {
            get {
                return this.showThirdField;
            }
            set {
                this.showThirdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://com.itraycer.mts/")]
    public partial class CaseNameType {
        
        private string caseNameField;
        
        private int caseIdField;
        
        /// <remarks/>
        public string CaseName {
            get {
                return this.caseNameField;
            }
            set {
                this.caseNameField = value;
            }
        }
        
        /// <remarks/>
        public int CaseId {
            get {
                return this.caseIdField;
            }
            set {
                this.caseIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://com.itraycer.mts/")]
    public partial class CompoundNameType {
        
        private CaseNameType[] caseNameTypeListField;
        
        private CaseTypeValues[] caseTypeValuesListField;
        
        /// <remarks/>
        public CaseNameType[] CaseNameTypeList {
            get {
                return this.caseNameTypeListField;
            }
            set {
                this.caseNameTypeListField = value;
            }
        }
        
        /// <remarks/>
        public CaseTypeValues[] CaseTypeValuesList {
            get {
                return this.caseTypeValuesListField;
            }
            set {
                this.caseTypeValuesListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://com.itraycer.mts/")]
    public partial class ReplenishEmail {
        
        private string emailField;
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://com.itraycer.mts/")]
    public partial class ReplenishAddress {
        
        private string mAddressIDField;
        
        private string[] mEmailsField;
        
        private string mAttnToField;
        
        private string mAddressField;
        
        private string mCityField;
        
        private string mStateField;
        
        private string mZipField;
        
        /// <remarks/>
        public string MAddressID {
            get {
                return this.mAddressIDField;
            }
            set {
                this.mAddressIDField = value;
            }
        }
        
        /// <remarks/>
        public string[] MEmails {
            get {
                return this.mEmailsField;
            }
            set {
                this.mEmailsField = value;
            }
        }
        
        /// <remarks/>
        public string MAttnTo {
            get {
                return this.mAttnToField;
            }
            set {
                this.mAttnToField = value;
            }
        }
        
        /// <remarks/>
        public string MAddress {
            get {
                return this.mAddressField;
            }
            set {
                this.mAddressField = value;
            }
        }
        
        /// <remarks/>
        public string MCity {
            get {
                return this.mCityField;
            }
            set {
                this.mCityField = value;
            }
        }
        
        /// <remarks/>
        public string MState {
            get {
                return this.mStateField;
            }
            set {
                this.mStateField = value;
            }
        }
        
        /// <remarks/>
        public string MZip {
            get {
                return this.mZipField;
            }
            set {
                this.mZipField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://com.itraycer.mts/")]
    public partial class CompoundAddressEmail {
        
        private ReplenishAddress[] addressListField;
        
        private ReplenishEmail[] emailListField;
        
        /// <remarks/>
        public ReplenishAddress[] AddressList {
            get {
                return this.addressListField;
            }
            set {
                this.addressListField = value;
            }
        }
        
        /// <remarks/>
        public ReplenishEmail[] EmailList {
            get {
                return this.emailListField;
            }
            set {
                this.emailListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://com.itraycer.mts/")]
    public partial class TrayderObject {
        
        private LocationInfo locationInfoField;
        
        private int idField;
        
        private TrayInfo trayDataInfoField;
        
        private int requestorField;
        
        private int requesteeField;
        
        private bool isApprovedField;
        
        private System.DateTime requestDateField;
        
        /// <remarks/>
        public LocationInfo LocationInfo {
            get {
                return this.locationInfoField;
            }
            set {
                this.locationInfoField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public TrayInfo TrayDataInfo {
            get {
                return this.trayDataInfoField;
            }
            set {
                this.trayDataInfoField = value;
            }
        }
        
        /// <remarks/>
        public int Requestor {
            get {
                return this.requestorField;
            }
            set {
                this.requestorField = value;
            }
        }
        
        /// <remarks/>
        public int Requestee {
            get {
                return this.requesteeField;
            }
            set {
                this.requesteeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsApproved {
            get {
                return this.isApprovedField;
            }
            set {
                this.isApprovedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime RequestDate {
            get {
                return this.requestDateField;
            }
            set {
                this.requestDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://com.itraycer.mts/")]
    public partial class LocationInfo : CoreInfo {
        
        private int locationIDField;
        
        private string locationNameField;
        
        private string locationTypeField;
        
        private string locationRankField;
        
        private string latitudeField;
        
        private string longitudeField;
        
        private int customerIdField;
        
        private int hospitalIdField;
        
        /// <remarks/>
        public int LocationID {
            get {
                return this.locationIDField;
            }
            set {
                this.locationIDField = value;
            }
        }
        
        /// <remarks/>
        public string LocationName {
            get {
                return this.locationNameField;
            }
            set {
                this.locationNameField = value;
            }
        }
        
        /// <remarks/>
        public string LocationType {
            get {
                return this.locationTypeField;
            }
            set {
                this.locationTypeField = value;
            }
        }
        
        /// <remarks/>
        public string LocationRank {
            get {
                return this.locationRankField;
            }
            set {
                this.locationRankField = value;
            }
        }
        
        /// <remarks/>
        public string Latitude {
            get {
                return this.latitudeField;
            }
            set {
                this.latitudeField = value;
            }
        }
        
        /// <remarks/>
        public string Longitude {
            get {
                return this.longitudeField;
            }
            set {
                this.longitudeField = value;
            }
        }
        
        /// <remarks/>
        public int CustomerId {
            get {
                return this.customerIdField;
            }
            set {
                this.customerIdField = value;
            }
        }
        
        /// <remarks/>
        public int HospitalId {
            get {
                return this.hospitalIdField;
            }
            set {
                this.hospitalIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TrayInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LocationInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LotInfo))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://com.itraycer.mts/")]
    public abstract partial class CoreInfo {
        
        private string createdByField;
        
        private System.DateTime createdDateField;
        
        private string descriptionField;
        
        private int idField;
        
        private string modifiedByField;
        
        private System.Nullable<System.DateTime> modifiedDateField;
        
        /// <remarks/>
        public string CreatedBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreatedDate {
            get {
                return this.createdDateField;
            }
            set {
                this.createdDateField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string ModifiedBy {
            get {
                return this.modifiedByField;
            }
            set {
                this.modifiedByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> ModifiedDate {
            get {
                return this.modifiedDateField;
            }
            set {
                this.modifiedDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://com.itraycer.mts/")]
    public partial class TrayInfo : CoreInfo {
        
        private LocationInfo trayLocationField;
        
        private string subStatusField;
        
        private LotInfo[] lotsField;
        
        private int idField;
        
        private int trayIDField;
        
        private string trayNumberField;
        
        private string trayCurrentHolderField;
        
        private string trayWorkTypeField;
        
        private string trayStatusDescrField;
        
        private System.Nullable<System.DateTime> trayReceiptDateField;
        
        private System.Nullable<System.DateTime> trayHandoverDateField;
        
        private int trayStatusField;
        
        private string manufacturerIdField;
        
        private int purgeStatusField;
        
        private int repIdField;
        
        private string repNameField;
        
        private string fedexTrackingNumberField;
        
        private string trayBarcodeIDField;
        
        private string trayClassField;
        
        private int issueTypeIdField;
        
        private string issueTypeField;
        
        private System.Nullable<System.DateTime> lastServiceDateField;
        
        private string notesField;
        
        private decimal distanceInMilesField;
        
        private string traytypecdField;
        
        private int companyIdField;
        
        private string workflowStatusField;
        
        private string unitNumberField;
        
        private string distributorField;
        
        /// <remarks/>
        public LocationInfo TrayLocation {
            get {
                return this.trayLocationField;
            }
            set {
                this.trayLocationField = value;
            }
        }
        
        /// <remarks/>
        public string SubStatus {
            get {
                return this.subStatusField;
            }
            set {
                this.subStatusField = value;
            }
        }
        
        /// <remarks/>
        public LotInfo[] Lots {
            get {
                return this.lotsField;
            }
            set {
                this.lotsField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int TrayID {
            get {
                return this.trayIDField;
            }
            set {
                this.trayIDField = value;
            }
        }
        
        /// <remarks/>
        public string TrayNumber {
            get {
                return this.trayNumberField;
            }
            set {
                this.trayNumberField = value;
            }
        }
        
        /// <remarks/>
        public string TrayCurrentHolder {
            get {
                return this.trayCurrentHolderField;
            }
            set {
                this.trayCurrentHolderField = value;
            }
        }
        
        /// <remarks/>
        public string TrayWorkType {
            get {
                return this.trayWorkTypeField;
            }
            set {
                this.trayWorkTypeField = value;
            }
        }
        
        /// <remarks/>
        public string TrayStatusDescr {
            get {
                return this.trayStatusDescrField;
            }
            set {
                this.trayStatusDescrField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> TrayReceiptDate {
            get {
                return this.trayReceiptDateField;
            }
            set {
                this.trayReceiptDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> TrayHandoverDate {
            get {
                return this.trayHandoverDateField;
            }
            set {
                this.trayHandoverDateField = value;
            }
        }
        
        /// <remarks/>
        public int TrayStatus {
            get {
                return this.trayStatusField;
            }
            set {
                this.trayStatusField = value;
            }
        }
        
        /// <remarks/>
        public string ManufacturerId {
            get {
                return this.manufacturerIdField;
            }
            set {
                this.manufacturerIdField = value;
            }
        }
        
        /// <remarks/>
        public int PurgeStatus {
            get {
                return this.purgeStatusField;
            }
            set {
                this.purgeStatusField = value;
            }
        }
        
        /// <remarks/>
        public int RepId {
            get {
                return this.repIdField;
            }
            set {
                this.repIdField = value;
            }
        }
        
        /// <remarks/>
        public string RepName {
            get {
                return this.repNameField;
            }
            set {
                this.repNameField = value;
            }
        }
        
        /// <remarks/>
        public string FedexTrackingNumber {
            get {
                return this.fedexTrackingNumberField;
            }
            set {
                this.fedexTrackingNumberField = value;
            }
        }
        
        /// <remarks/>
        public string TrayBarcodeID {
            get {
                return this.trayBarcodeIDField;
            }
            set {
                this.trayBarcodeIDField = value;
            }
        }
        
        /// <remarks/>
        public string TrayClass {
            get {
                return this.trayClassField;
            }
            set {
                this.trayClassField = value;
            }
        }
        
        /// <remarks/>
        public int IssueTypeId {
            get {
                return this.issueTypeIdField;
            }
            set {
                this.issueTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public string IssueType {
            get {
                return this.issueTypeField;
            }
            set {
                this.issueTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> LastServiceDate {
            get {
                return this.lastServiceDateField;
            }
            set {
                this.lastServiceDateField = value;
            }
        }
        
        /// <remarks/>
        public string Notes {
            get {
                return this.notesField;
            }
            set {
                this.notesField = value;
            }
        }
        
        /// <remarks/>
        public decimal DistanceInMiles {
            get {
                return this.distanceInMilesField;
            }
            set {
                this.distanceInMilesField = value;
            }
        }
        
        /// <remarks/>
        public string Traytypecd {
            get {
                return this.traytypecdField;
            }
            set {
                this.traytypecdField = value;
            }
        }
        
        /// <remarks/>
        public int CompanyId {
            get {
                return this.companyIdField;
            }
            set {
                this.companyIdField = value;
            }
        }
        
        /// <remarks/>
        public string WorkflowStatus {
            get {
                return this.workflowStatusField;
            }
            set {
                this.workflowStatusField = value;
            }
        }
        
        /// <remarks/>
        public string UnitNumber {
            get {
                return this.unitNumberField;
            }
            set {
                this.unitNumberField = value;
            }
        }
        
        /// <remarks/>
        public string Distributor {
            get {
                return this.distributorField;
            }
            set {
                this.distributorField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://com.itraycer.mts/")]
    public partial class LotInfo : CoreInfo {
        
        private string lotNumberField;
        
        private string trayNumberField;
        
        private string partNumberField;
        
        private int repIdField;
        
        private string repNameField;
        
        private int purgeStatusField;
        
        private string lotStatusDescField;
        
        private string lotClassField;
        
        private int amountField;
        
        private System.Nullable<int> trayIdField;
        
        private System.Nullable<System.DateTime> expirationDateField;
        
        private int customerIdField;
        
        private string fdsStatusNameField;
        
        private int fdaStatusIdField;
        
        private string trackingField;
        
        /// <remarks/>
        public string LotNumber {
            get {
                return this.lotNumberField;
            }
            set {
                this.lotNumberField = value;
            }
        }
        
        /// <remarks/>
        public string TrayNumber {
            get {
                return this.trayNumberField;
            }
            set {
                this.trayNumberField = value;
            }
        }
        
        /// <remarks/>
        public string PartNumber {
            get {
                return this.partNumberField;
            }
            set {
                this.partNumberField = value;
            }
        }
        
        /// <remarks/>
        public int RepId {
            get {
                return this.repIdField;
            }
            set {
                this.repIdField = value;
            }
        }
        
        /// <remarks/>
        public string RepName {
            get {
                return this.repNameField;
            }
            set {
                this.repNameField = value;
            }
        }
        
        /// <remarks/>
        public int PurgeStatus {
            get {
                return this.purgeStatusField;
            }
            set {
                this.purgeStatusField = value;
            }
        }
        
        /// <remarks/>
        public string LotStatusDesc {
            get {
                return this.lotStatusDescField;
            }
            set {
                this.lotStatusDescField = value;
            }
        }
        
        /// <remarks/>
        public string LotClass {
            get {
                return this.lotClassField;
            }
            set {
                this.lotClassField = value;
            }
        }
        
        /// <remarks/>
        public int Amount {
            get {
                return this.amountField;
            }
            set {
                this.amountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> TrayId {
            get {
                return this.trayIdField;
            }
            set {
                this.trayIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> ExpirationDate {
            get {
                return this.expirationDateField;
            }
            set {
                this.expirationDateField = value;
            }
        }
        
        /// <remarks/>
        public int CustomerId {
            get {
                return this.customerIdField;
            }
            set {
                this.customerIdField = value;
            }
        }
        
        /// <remarks/>
        public string FdsStatusName {
            get {
                return this.fdsStatusNameField;
            }
            set {
                this.fdsStatusNameField = value;
            }
        }
        
        /// <remarks/>
        public int FdaStatusId {
            get {
                return this.fdaStatusIdField;
            }
            set {
                this.fdaStatusIdField = value;
            }
        }
        
        /// <remarks/>
        public string Tracking {
            get {
                return this.trackingField;
            }
            set {
                this.trackingField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void HasLoggedInOrOutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetDocPrefsFromDumpCompletedEventHandler(object sender, GetDocPrefsFromDumpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocPrefsFromDumpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocPrefsFromDumpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CalculateScheduleRevenueCompletedEventHandler(object sender, CalculateScheduleRevenueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateScheduleRevenueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateScheduleRevenueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CheckRecallsCompletedEventHandler(object sender, CheckRecallsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRecallsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRecallsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetRecallAlertDataCompletedEventHandler(object sender, GetRecallAlertDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRecallAlertDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRecallAlertDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateRecallStatusCompletedEventHandler(object sender, UpdateRecallStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateRecallStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateRecallStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void InsertChatMessageCompletedEventHandler(object sender, InsertChatMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertChatMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertChatMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCoIDandRepIDCompletedEventHandler(object sender, GetCoIDandRepIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCoIDandRepIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCoIDandRepIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetLocationsByCompanyCompletedEventHandler(object sender, GetLocationsByCompanyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationsByCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocationsByCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcessBarCodeCompletedEventHandler(object sender, ProcessBarCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessBarCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessBarCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void PurgeInSurgeryCompletedEventHandler(object sender, PurgeInSurgeryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurgeInSurgeryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurgeInSurgeryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SaveSurgeryScheduleCompletedEventHandler(object sender, SaveSurgeryScheduleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveSurgeryScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveSurgeryScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateSurgeryScheduleCompletedEventHandler(object sender, UpdateSurgeryScheduleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSurgeryScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSurgeryScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteSurgeryScheduleCompletedEventHandler(object sender, DeleteSurgeryScheduleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSurgeryScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteSurgeryScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetSurgeryScheduleCompletedEventHandler(object sender, GetSurgeryScheduleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSurgeryScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSurgeryScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SaveRandomTraysCompletedEventHandler(object sender, SaveRandomTraysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveRandomTraysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveRandomTraysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAllTrayTypesByCompanyCompletedEventHandler(object sender, GetAllTrayTypesByCompanyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllTrayTypesByCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllTrayTypesByCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SaveRandomDeviceCompletedEventHandler(object sender, SaveRandomDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveRandomDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveRandomDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SaveRandomBiologicCompletedEventHandler(object sender, SaveRandomBiologicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveRandomBiologicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveRandomBiologicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void InsertTrayNotesCompletedEventHandler(object sender, InsertTrayNotesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertTrayNotesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertTrayNotesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SaveRandomInventoryCompletedEventHandler(object sender, SaveRandomInventoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveRandomInventoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveRandomInventoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetNewsCompletedEventHandler(object sender, GetNewsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNewsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNewsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAlertValuesCompletedEventHandler(object sender, GetAlertValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAlertValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAlertValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetRevenueCompletedEventHandler(object sender, GetRevenueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRevenueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRevenueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAddressByCoordinatesForPhoneCompletedEventHandler(object sender, GetAddressByCoordinatesForPhoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAddressByCoordinatesForPhoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAddressByCoordinatesForPhoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetChatMessagesCompletedEventHandler(object sender, GetChatMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChatMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChatMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ReturnChatRepsCompletedEventHandler(object sender, ReturnChatRepsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReturnChatRepsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReturnChatRepsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddInventoryByTrayLotPartCompletedEventHandler(object sender, AddInventoryByTrayLotPartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddInventoryByTrayLotPartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddInventoryByTrayLotPartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void PurgeInventoryCompletedEventHandler(object sender, PurgeInventoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurgeInventoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurgeInventoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void PurgeInventoryEncryptCompletedEventHandler(object sender, PurgeInventoryEncryptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurgeInventoryEncryptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurgeInventoryEncryptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void InsertLoanerShipInfoCompletedEventHandler(object sender, InsertLoanerShipInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertLoanerShipInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertLoanerShipInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AllManufacturesCompletedEventHandler(object sender, AllManufacturesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AllManufacturesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AllManufacturesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetZonesByRepIDCompletedEventHandler(object sender, GetZonesByRepIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetZonesByRepIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetZonesByRepIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ValidatePasscodeCompletedEventHandler(object sender, ValidatePasscodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidatePasscodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidatePasscodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetPartNumbersByRepIDCompletedEventHandler(object sender, GetPartNumbersByRepIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPartNumbersByRepIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPartNumbersByRepIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetTraysByLotOrPartNumberCompletedEventHandler(object sender, GetTraysByLotOrPartNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTraysByLotOrPartNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTraysByLotOrPartNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetTraysByLotOrPartNumberEncryptCompletedEventHandler(object sender, GetTraysByLotOrPartNumberEncryptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTraysByLotOrPartNumberEncryptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTraysByLotOrPartNumberEncryptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void InsertInstrumentUsageCountCompletedEventHandler(object sender, InsertInstrumentUsageCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertInstrumentUsageCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertInstrumentUsageCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetPurgedPartNumbersByRepIDCompletedEventHandler(object sender, GetPurgedPartNumbersByRepIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPurgedPartNumbersByRepIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPurgedPartNumbersByRepIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void HasRequestCompletedEventHandler(object sender, HasRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void MakeRequestCompletedEventHandler(object sender, MakeRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MakeRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MakeRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ReturnRepNameCompletedEventHandler(object sender, ReturnRepNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReturnRepNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReturnRepNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetInventoryByRadiusAndParamsCompletedEventHandler(object sender, GetInventoryByRadiusAndParamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInventoryByRadiusAndParamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInventoryByRadiusAndParamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TrayInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TrayInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ReceiverManagerGetScannedTraysCompletedEventHandler(object sender, ReceiverManagerGetScannedTraysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceiverManagerGetScannedTraysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReceiverManagerGetScannedTraysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetTrayderRequestsCompletedEventHandler(object sender, GetTrayderRequestsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTrayderRequestsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTrayderRequestsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TrayderObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TrayderObject[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void TrayderAgreeCompletedEventHandler(object sender, TrayderAgreeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TrayderAgreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TrayderAgreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetTrayDataByRepIDCompletedEventHandler(object sender, GetTrayDataByRepIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTrayDataByRepIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTrayDataByRepIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void TESTCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RetrieveLoanerTrayListCompletedEventHandler(object sender, RetrieveLoanerTrayListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveLoanerTrayListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveLoanerTrayListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetDoctorsCompletedEventHandler(object sender, GetDoctorsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDoctorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDoctorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetShippingAddressByRepAndCoCompletedEventHandler(object sender, GetShippingAddressByRepAndCoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetShippingAddressByRepAndCoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetShippingAddressByRepAndCoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CompoundAddressEmail Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CompoundAddressEmail)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetSurgeryTypesCompletedEventHandler(object sender, GetSurgeryTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSurgeryTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSurgeryTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CompoundNameType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CompoundNameType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateTrayByEntityCompletedEventHandler(object sender, UpdateTrayByEntityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateTrayByEntityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateTrayByEntityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591